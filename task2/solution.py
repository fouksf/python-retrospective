from collections import OrderedDict


def groupby(func, seq):
    """Return a dict with keys generated by func and values in seq."""
    result = {}
    for item in seq:
        result.setdefault(func(item), []).append(item)
    return result


def iterate(func):
    """Generate endless composition of a function with itself.

    The first iteration is the identity function.

    """
    compose = lambda f, g: lambda x: f(g(x))
    current_result = lambda x: x
    while True:
        yield current_result
        current_result = compose(func, current_result)


def zip_with(func, *iterables):
    """Zip iterables and apply func on each tuple"""
    for arguments in zip(*iterables):
        yield func(*arguments)


def cache(func, cache_size):
    """Return a version of func with the last cache_size calls cached."""
    cache = OrderedDict()
    if cache_size <= 0:
        return func

    def cached_func(*args):
        if args not in cache:
            if len(cache) == cache_size:
                cache.popitem(False)
            cache[args] = func(*args)
        return cache[args]

    return cached_func
